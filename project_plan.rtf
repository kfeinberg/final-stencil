{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs30\fsmilli15333 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 General Description
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 For this project, the final product will be a rendering of a forest with volumetric lighting/crepuscular rays shining between tree branches. As possible extensions, we may render the ground as grass, allow the sun location to be moved with a slider, and/or render wind moving through the trees.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 Lindenmayer Systems (L-systems):
\f1\b0\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 We plan to use L-systems to implement the trees in our scene. This means that the branches will be built recursively in a fractal-like system.\'a0
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 Specifically, we would first implement a deterministic L-system. This L-system would consist of letters that describe different parts of a tree (e.g. trunk, branches, leaves). It would also contain rules for transforming the initial word, e.g. \'93+X\'94 means to turn right by X degrees. Additionally, we would use a stack to implement a bracketed L-system to get the recursive fractal-like shape you would expect to see in a tree. Implementing this feature would require simply string parsing and manipulation.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 Next, we would implement basic texture mapping for the trunk, branches, and leaves so that the trees have color and look more realistic.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 Finally, we would modify our L-system to be stochastic, which will allow for a wider variety of trees.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 Volumetric lighting/crepuscular rays:
\f1\b0\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 This portion of the project will be implemented in the shader. First, we render the sun while keeping the rest of the scene silhouetted/black. Then, in this shader, we iterate through each pixel of the image to calculate the effect that the sun rays have on its illumination. This is done using equations/algorithms from our links below. Finally, we set the final displayed color of the pixel by adding its volumetric lighting color to its real color from the scene.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 Grass:
\f1\b0\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 To render grass efficiently, we would render several planes arranged in a star-shaped pattern. We would then render a grass texture on each plane. This is similar to the process that old video games used to render trees. By following this procedure, we will be able to render grass on the floor of our scene that is relatively realistic but does not require a lot of GPU power, which will allow us to render our scene in real time.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs30\fsmilli15333 \cf2 Resources
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 L-systems:
\f1\b0\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 https://jsantell.com/l-systems/
\f1\fs24 \

\f2\fs26\fsmilli13333 http://paulbourke.net/fractals/lsys/
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 Volumetric lighting:
\f1\b0\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process
\f1\fs24 \

\f2\fs26\fsmilli13333 https://fabiensanglard.net/lightScattering/
\f1\fs24 \

\f2\fs26\fsmilli13333 http://anderskruger.com/opengl-god-rays/
\f1\fs24 \

\f2\fs26\fsmilli13333 https://lokeshsharma97.wordpress.com/2017/08/04/god-rays-opengl/
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 Grass
\f2\b0 :
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-7-rendering-countless-blades-waving-grass
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs30\fsmilli15333 \cf2 High-level overview
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 The pieces of this project will come together into a visually compelling forest scene with grass, trees, and volumetric lighting.\'a0
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 First, we will calculate the coordinates of our trees in the CPU using L-systems. We will use OpenGL data structures to communicate this information to the GPU. The positions of each group of grass would be calculated in the CPU then passed to the GPU.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 We would use the Phong lighting model and ambient lighting to illuminate the majority of the scene. Finally, we will calculate the effect of volumetric lighting on our scene in the shader as described above and display the final image to the viewer.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs30\fsmilli15333 \cf2 Division of labor
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 For the first section of our project, we will render the trees. We will divide this into two parts:\'a0
\f1\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0
\f2\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Using L-systems to generate a string representing our tree and\'a0\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Converting this string to a tree graphic\uc0\u8232 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 Kalli will do the first part and Patrick will do the second.\'a0\'a0
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 For the volumetric lighting, Patrick will prepare the information to be passed to the shader and Kalli will implement shader calculations.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26\fsmilli13333 \cf2 Kalli will complete the grass portion for the project for her Capstone credit.
\f1\fs24 \
}